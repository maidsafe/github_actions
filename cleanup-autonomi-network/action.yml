name: 'Cleanup Autonomi Network'
description: 'Stops local Autonomi testnet and EVM processes, cleans up resources'
author: 'MaidSafe'

branding:
  icon: 'trash-2'
  color: 'red'

inputs:
  upload-logs:
    description: 'Whether to upload logs as artifacts'
    required: false
    default: 'false'
  
  keep-directories:
    description: 'Whether to keep network directories after cleanup'
    required: false
    default: 'true'
  
  timeout-minutes:
    description: 'Maximum time to wait for cleanup operations'
    required: false
    default: '5'

outputs:
  cleanup-status:
    description: 'Status of the cleanup operation'
    value: ${{ steps.cleanup-network.outputs.status }}

runs:
  using: 'composite'
  steps:
    - name: Install cleanup prerequisites
      shell: bash
      run: |
        echo "Installing cleanup prerequisites..."
        
        # Ensure basic tools are available
        if ! command -v ps &> /dev/null; then
          echo "Warning: ps command not found - process verification may fail"
        fi
        
        if ! command -v pkill &> /dev/null; then
          echo "‚ö†Ô∏è  WARNING: pkill command not found - trying to install procps"
          sudo apt-get update && sudo apt-get install -y procps || {
            echo "‚ùå ERROR: Could not install procps. Process cleanup may be incomplete."
            echo "   Manual cleanup may be required after this action completes."
          }
        fi
        
        if ! command -v netstat &> /dev/null; then
          echo "Installing net-tools for network diagnostics..."
          sudo apt-get update && sudo apt-get install -y net-tools || {
            echo "‚ö†Ô∏è  WARNING: Could not install net-tools. Network diagnostics will be limited."
          }
        fi
        
        echo "Prerequisites check completed"

    - name: Stop Autonomi network processes
      id: cleanup-network
      shell: bash
      run: |
        echo "=========================================="
        echo "Starting Autonomi Network Cleanup"
        echo "=========================================="
        
        cleanup_status="success"
        
        # Stop antctl local network
        echo "Stopping local Autonomi network..."
        echo "Checking for antctl binary..."
        which antctl || echo "antctl not found in PATH"
        
        if command -v antctl &> /dev/null; then
          if [[ "${{ inputs.keep-directories }}" == "true" ]]; then
            echo "Running: antctl local kill --keep-directories"
            antctl local kill --keep-directories || {
              echo "‚ö†Ô∏è  WARNING: antctl kill with keep-directories failed"
              echo "   This may indicate the network was already stopped or crashed"
              echo "   Continuing with manual process cleanup..."
              cleanup_status="partial"
            }
          else
            echo "Running: antctl local kill"
            antctl local kill || {
              echo "‚ö†Ô∏è  WARNING: antctl kill failed"
              echo "   This may indicate the network was already stopped or crashed"
              echo "   Continuing with manual process cleanup..."
              cleanup_status="partial"
            }
          fi
        else
          echo "‚ö†Ô∏è  WARNING: antctl not found in PATH"
          echo "   The network may not have been properly started, or binaries were not installed"
          echo "   Continuing with manual process cleanup..."
          cleanup_status="partial"
        fi
        
        # Stop EVM testnet process
        echo "Stopping EVM testnet processes..."
        if pkill -f "evm-testnet"; then
          echo "‚úÖ Stopped EVM testnet processes"
        else
          echo "‚ÑπÔ∏è  No evm-testnet processes found (may not have been running)"
        fi
        
        # Stop anvil processes (if any)
        echo "Stopping anvil processes..."
        if pkill -f "anvil"; then
          echo "‚úÖ Stopped anvil processes"
        else
          echo "‚ÑπÔ∏è  No anvil processes found (may not have been running)"
        fi
        
        # Kill any remaining antnode processes
        echo "Stopping antnode processes..."
        if pkill -f "antnode"; then
          echo "‚úÖ Stopped antnode processes"
        else
          echo "‚úÖ  No antnode processes found (antctl did its work)"
        fi

        # Wait a moment for processes to terminate
        sleep 2
        
        echo "status=$cleanup_status" >> $GITHUB_OUTPUT
        echo "Cleanup status: $cleanup_status"

    - name: Collect network logs
      if: inputs.upload-logs == 'true'
      shell: bash
      run: |
        echo "Collecting network logs for upload..."
        
        # Create logs directory
        mkdir -p network-logs
        
        # Collect Autonomi logs if they exist
        autonomi_log_dir="$HOME/.local/share/autonomi"
        if [ -d "$autonomi_log_dir" ]; then
          echo "Copying Autonomi logs from $autonomi_log_dir..."
          cp -r "$autonomi_log_dir" network-logs/autonomi-logs/ || {
            echo "‚ö†Ô∏è  WARNING: Could not copy Autonomi logs"
            echo "   Log directory exists but copy failed - check permissions"
            echo "   Directory contents:"
            ls -la "$autonomi_log_dir" || echo "   Could not list directory contents"
          }
        else
          echo "‚ÑπÔ∏è  No Autonomi log directory found at $autonomi_log_dir"
        fi
        
        # Collect system logs related to our processes
        echo "Collecting process information..."
        ps aux | grep -E "(antnode|antctl|evm-testnet|anvil)" > network-logs/final-processes.txt || echo "No processes found"
        
        # Collect network interface information
        echo "Collecting network information..."
        netstat -tlnp 2>/dev/null | grep -E ":(8545|3000|4000)" > network-logs/network-ports.txt || echo "No relevant ports found"
        
        # Create a detailed summary
        cat > network-logs/cleanup-summary.txt << 'CLEANUP_SUMMARY_EOF'
        Autonomi Network Cleanup Summary
        ===============================
        Timestamp: $(date)
        Cleanup Status: ${{ steps.cleanup-network.outputs.status }}
        Keep Directories: ${{ inputs.keep-directories }}
        Upload Logs: ${{ inputs.upload-logs }}
        GitHub Run ID: ${{ github.run_id }}
        Workflow: ${{ github.workflow }}

        Process Cleanup Results:
        - antctl network shutdown: $(if command -v antctl &> /dev/null; then echo "attempted"; else echo "skipped (not found)"; fi)
        - antnode processes: $(if pkill -0 -f "antnode" 2>/dev/null; then echo "still running"; else echo "stopped"; fi)
        - evm-testnet processes: $(if pkill -0 -f "evm-testnet" 2>/dev/null; then echo "still running"; else echo "stopped"; fi)
        - anvil processes: $(if pkill -0 -f "anvil" 2>/dev/null; then echo "still running"; else echo "stopped"; fi)

        Final Process Count: $(ps aux | grep -E "(antnode|antctl|evm-testnet|anvil)" | grep -v grep | wc -l) remaining

        If cleanup status is 'partial', manual intervention may be required.
        CLEANUP_SUMMARY_EOF
        
        echo "Logs collected in network-logs directory"
        ls -la network-logs/

    - name: Upload network logs
      if: inputs.upload-logs == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: autonomi-network-logs-${{ github.run_id }}
        path: network-logs/
        retention-days: 7

    - name: Clean up temporary files
      shell: bash
      run: |
        echo "Cleaning up temporary files..."
        
        # Remove any temporary upload directories
        rm -rf temp_uploads/ || echo "No temp_uploads directory"
        rm -rf test_temp_* || echo "No test_temp files"
        
        # Remove downloaded binaries if they exist in current directory
        rm -f autonomi-binaries.zip autonomi-source.zip || echo "No binary archives to clean"
        
        # Clean up any extracted source directories
        rm -rf autonomi-stable-* autonomi-rc-* || echo "No source directories to clean"
        
        echo "‚úÖ Temporary files cleaned up"

    - name: Cleanup summary
      shell: bash
      run: |
        echo "=========================================="
        echo "Autonomi Network Cleanup Complete"
        echo "=========================================="
        echo "Status: ${{ steps.cleanup-network.outputs.status }}"
        echo "Keep Directories: ${{ inputs.keep-directories }}"
        echo "Logs Uploaded: ${{ inputs.upload-logs }}"
        echo "=========================================="
        
        if [[ "${{ steps.cleanup-network.outputs.status }}" == "success" ]]; then
          echo "üßπ Network cleanup completed successfully!"
        else
          echo "‚ö†Ô∏è  Network cleanup completed with warnings - check logs above"
        fi